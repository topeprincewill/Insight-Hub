{"version":3,"sources":["../../src/cli.ts","../../src/components/update-warning-table/utils.tsx","../../src/utils/package/index.ts","../../src/utils/spinner/index.ts","../../src/components/update-warning-table/table.tsx","../../src/commands/check-updates/index.tsx","../../src/commands/create-resource/index.ts","../../src/definitions/projectTypes.ts","../../src/definitions/uiFrameworks.ts","../../src/definitions/package.ts","../../src/utils/project/index.ts","../../src/utils/compile/index.ts","../../src/utils/text/index.ts","../../src/utils/resource/index.ts","../../src/utils/env/index.ts","../../src/commands/proxy/index.ts","../../src/commands/runner/projectScripts.ts","../../src/commands/runner/runScript.ts","../../src/update-notifier/index.tsx","../../src/utils/encode/index.ts","../../src/commands/runner/utils/index.ts","../../src/commands/runner/start/index.ts","../../src/commands/runner/dev/index.ts","../../src/commands/runner/build/index.ts","../../src/commands/runner/run/index.ts","../../src/commands/swizzle/index.tsx","../../src/utils/swizzle/index.ts","../../src/utils/swizzle/provideCliHelpers.ts","../../src/index.ts","../../src/utils/swizzle/import.ts","../../src/utils/swizzle/appendAfterImports.ts","../../src/utils/swizzle/getFileContent.ts","../../src/utils/swizzle/prettierFormat.ts","../../src/components/swizzle-message/index.tsx","../../src/utils/swizzle/codes.ts","../../src/utils/swizzle/renderCodeMarkdown.ts","../../src/utils/swizzle/parseSwizzleBlocks.ts","../../src/utils/swizzle/getPathPrefix.ts","../../src/commands/swizzle/install-required-packages/index.ts","../../src/commands/update/index.ts","../../src/commands/update/interactive/index.ts","../../src/utils/array/index.ts","../../src/commands/whoami/index.ts","../../src/utils/os/index.ts","../../src/telemetry/index.ts","../../src/cloud-notifier/index.tsx","../../src/components/cloud-message/index.tsx"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from \"commander\";\n\nimport figlet from \"figlet\";\n\nimport checkUpdates from \"@commands/check-updates\";\nimport createResource from \"@commands/create-resource\";\nimport proxy from \"@commands/proxy\";\nimport { build, dev, run, start } from \"@commands/runner\";\nimport swizzle from \"@commands/swizzle\";\nimport update from \"@commands/update\";\nimport whoami from \"@commands/whoami\";\nimport { telemetryHook } from \"@telemetryindex\";\nimport \"@utils/env\";\nimport NotifyCloud from \"./cloud-notifier\";\n\n// It reads and updates from package.json during build. ref: tsup.config.ts\nconst REFINE_CLI_VERSION = \"1.0.0\";\n\nconst bootstrap = () => {\n    const program = new Command();\n\n    program\n        .version(\n            `@refinedev/cli@${REFINE_CLI_VERSION}`,\n            \"-v, --version\",\n            \"Output the current version.\",\n        )\n        .description(\n            figlet.textSync(\"refine\", {\n                font: \"Isometric1\",\n                horizontalLayout: \"full\",\n                verticalLayout: \"full\",\n                whitespaceBreak: true,\n            }),\n        )\n        .usage(\"<command> [options]\")\n        .helpOption(\"-h, --help\", \"Output usage information.\");\n\n    // load commands\n    swizzle(program);\n    createResource(program);\n    update(program);\n    dev(program);\n    build(program);\n    start(program);\n    run(program);\n    checkUpdates(program);\n    whoami(program);\n    proxy(program);\n\n    program.hook(\"preAction\", (thisCommand) => {\n        NotifyCloud();\n    });\n\n    program.hook(\"postAction\", (thisCommand) => {\n        const command = thisCommand.args[0];\n\n        if ([\"run\"].includes(command)) return;\n\n        telemetryHook();\n    });\n\n    program.parse(process.argv);\n\n    if (!process.argv.slice(2).length) {\n        program.outputHelp();\n    }\n};\n\nbootstrap();\n","import React from \"react\";\nimport { render } from \"ink\";\nimport { getDependencies, getPreferedPM, getScripts } from \"@utils/package\";\nimport UpdateWarningTable, { UpdateWarningTableProps } from \"./table\";\n\nexport const getCommand = async () => {\n    const fallbackCommand = `npx @refinedev/cli update`;\n\n    const dependencies = getDependencies();\n    const scriptKeys = Object.keys(getScripts());\n\n    const hasCli = dependencies.includes(\"@refinedev/cli\");\n    const hasScript = scriptKeys.includes(\"refine\");\n\n    if (!hasCli && !hasScript) {\n        return fallbackCommand;\n    }\n\n    const pm = await getPreferedPM();\n\n    if (hasScript) {\n        return `${pm.name} run refine update`;\n    }\n\n    if (hasCli) {\n        return `npx refine update`;\n    }\n\n    return fallbackCommand;\n};\n\nexport const getUpdateWarningTable = async (\n    packages: UpdateWarningTableProps[\"data\"],\n) => {\n    const command = await getCommand();\n\n    render(<UpdateWarningTable data={packages} command={command} />);\n};\n","import { readFileSync, existsSync, readJSON, pathExists } from \"fs-extra\";\nimport execa from \"execa\";\nimport globby from \"globby\";\nimport path from \"path\";\nimport preferredPM from \"preferred-pm\";\nimport spinner from \"@utils/spinner\";\n\n// TODO: Add package.json type\nexport const getPackageJson = (): any => {\n    if (!existsSync(\"package.json\")) {\n        throw new Error(\"./package.json not found\");\n    }\n\n    return JSON.parse(readFileSync(\"package.json\", \"utf8\"));\n};\n\nexport const getDependencies = (): string[] => {\n    const packageJson = getPackageJson();\n    return Object.keys(packageJson.dependencies || {});\n};\n\nexport const getDependenciesWithVersion = (): string[] => {\n    const packageJson = getPackageJson();\n    return packageJson.dependencies;\n};\n\nexport const getDevDependencies = (): string[] => {\n    const packageJson = getPackageJson();\n    return Object.keys(packageJson.devDependencies || {});\n};\n\nexport const getScripts = (): Record<string, string> => {\n    const packageJson = getPackageJson();\n    return packageJson.scripts;\n};\n\nexport const getInstalledRefinePackages = async () => {\n    try {\n        const execution = await execa(\"npm\", [\"ls\", \"--depth=0\", \"--json\"], {\n            reject: false,\n        });\n\n        const dependencies = JSON.parse(execution.stdout)?.dependencies || {};\n        const refineDependencies = Object.keys(dependencies).filter(\n            (dependency) => dependency.startsWith(\"@refinedev\"),\n        );\n\n        const normalize: {\n            name: string;\n            version: string;\n        }[] = [];\n\n        for (const dependency of refineDependencies) {\n            const version = dependencies[dependency].version;\n            normalize.push({\n                name: dependency,\n                version,\n            });\n        }\n\n        return normalize;\n    } catch (error) {\n        return Promise.resolve(null);\n    }\n};\n\nexport const getInstalledRefinePackagesFromNodeModules = async () => {\n    const REFINE_PACKAGES = [\"ably\", \"airtable\", \"altogic\", \"antd\", \"appwrite\", \"chakra-ui\", \"codemod\", \"connect\", \"core\", \"graphql\", \"hasura\", \"inferencer\", \"kbar\", \"mantine\", \"medusa\", \"mui\", \"nestjsx-crud\", \"nextjs-router\", \"nhost\", \"react-hook-form\", \"react-location\", \"react-router\", \"react-router-v6\", \"react-table\", \"remix\", \"sdk\", \"simple-rest\", \"strapi\", \"strapi-graphql\", \"strapi-v4\", \"supabase\"];\n\n    try {\n        const packagesFromGlobbySearch = await globby(\n            \"node_modules/@refinedev/*\",\n            {\n                onlyDirectories: true,\n            },\n        );\n\n        const packageDirsFromModules = REFINE_PACKAGES.flatMap((pkg) => {\n            try {\n                const pkgPath = require.resolve(\n                    path.join(\"@refinedev\", pkg, \"package.json\"),\n                );\n\n                return [path.dirname(pkgPath)];\n            } catch (err) {\n                return [];\n            }\n        });\n\n        const refinePackages: Array<{ name: string; path: string }> = [];\n\n        await Promise.all(\n            [...packageDirsFromModules, ...packagesFromGlobbySearch].map(\n                async (packageDir) => {\n                    const hasPackageJson = await pathExists(\n                        `${packageDir}/package.json`,\n                    );\n                    if (hasPackageJson) {\n                        const packageJson = await readJSON(\n                            `${packageDir}/package.json`,\n                        );\n\n                        refinePackages.push({\n                            name: packageJson.name,\n                            path: packageDir,\n                        });\n                    }\n                },\n            ),\n        );\n\n        return refinePackages;\n    } catch (err) {\n        return [];\n    }\n};\nexport const isPackageHaveRefineConfig = async (packagePath: string) => {\n    return await pathExists(`${packagePath}/refine.config.js`);\n};\n\nexport const pmCommands = {\n    npm: {\n        install: [\"install\", \"--save\"],\n        installDev: [\"install\", \"--save-dev\"],\n        outdatedJson: [\"outdated\", \"--json\"],\n    },\n    yarn: {\n        install: [\"add\"],\n        installDev: [\"add\", \"-D\"],\n        outdatedJson: [\"outdated\", \"--json\"],\n    },\n    pnpm: {\n        install: [\"add\"],\n        installDev: [\"add\", \"-D\"],\n        outdatedJson: [\"outdated\", \"--format\", \"json\"],\n    },\n};\n\nexport const getPreferedPM = async () => {\n    const pm = await spinner(\n        () => preferredPM(process.cwd()),\n        \"Getting package manager...\",\n    );\n\n    if (!pm) {\n        throw new Error(\"Package manager not found.\");\n    }\n\n    return pm;\n};\n\nexport const installPackages = async (packages: string[]) => {\n    const pm = await getPreferedPM();\n\n    try {\n        const installCommand = pmCommands[pm.name].install;\n\n        const execution = execa(pm.name, [...installCommand, ...packages], {\n            stdio: \"inherit\",\n        });\n\n        execution.on(\"message\", (message) => {\n            console.log(message);\n        });\n\n        execution.on(\"error\", (error) => {\n            console.log(error);\n        });\n\n        execution.on(\"exit\", (exitCode) => {\n            if (exitCode === 0) {\n                console.log(\"All `refine` packages updated  🎉\");\n                return;\n            }\n\n            console.log(`Application exited with code ${exitCode}`);\n        });\n    } catch (error: any) {\n        throw new Error(error);\n    }\n};\n\nexport interface PackageNameAndVersion {\n    name: string;\n    version: string | null;\n}\n\nexport const parsePackageNameAndVersion = (\n    str: string,\n): PackageNameAndVersion => {\n    const versionStartIndex = str.lastIndexOf(\"@\");\n\n    if (versionStartIndex <= 0) {\n        return {\n            name: str,\n            version: null,\n        };\n    }\n\n    return {\n        name: str.slice(0, versionStartIndex),\n        version: str.slice(versionStartIndex + 1),\n    };\n};\n","import ora from \"ora\";\n\nconst spinner = async <T>(fn: () => Promise<T>, message: string) => {\n    const spinner = ora({\n        color: \"cyan\",\n        text: message,\n    }).start();\n    const result = await fn();\n    spinner.stop();\n    return result;\n};\n\nexport default spinner;\n","import React, { FC, useRef } from \"react\";\nimport Table from \"ink-table\";\nimport { Box, Text, TextProps } from \"ink\";\nimport { RefinePackageInstalledVersionData } from \"@definitions/package\";\n\nconst columIndex = {\n    name: 1,\n    current: 2,\n    wanted: 3,\n    latest: 4,\n};\n\nconst LAST_COLUMN_INDEX = 4;\n\nconst getVersions = (text: string) => {\n    const versions = text.split(\".\");\n    return {\n        major: versions[0],\n        minor: versions[1],\n        patch: versions[2],\n    };\n};\n\nconst getColorsByVersionDiffrence = (\n    installedVersion: ReturnType<typeof getVersions>,\n    nextVersion: ReturnType<typeof getVersions>,\n) => {\n    const isMajorDiffrence =\n        installedVersion.major.trim() !== nextVersion.major.trim();\n\n    if (isMajorDiffrence)\n        return {\n            major: \"red\",\n            minor: \"red\",\n            patch: \"red\",\n        };\n\n    const isMinorDiffrence =\n        installedVersion.minor.trim() !== nextVersion.minor.trim();\n\n    if (isMinorDiffrence)\n        return {\n            major: \"white\",\n            minor: \"yellow\",\n            patch: \"yellow\",\n        };\n\n    const isPatchDiffrence =\n        installedVersion.patch.trim() !== nextVersion.patch.trim();\n    if (isPatchDiffrence)\n        return {\n            major: \"white\",\n            minor: \"white\",\n            patch: \"green\",\n        };\n\n    return {\n        major: \"white\",\n        minor: \"white\",\n        patch: \"white\",\n    };\n};\n\nexport interface UpdateWarningTableProps {\n    data: RefinePackageInstalledVersionData[];\n    command: string;\n}\n\nconst UpdateWarningTable: FC<UpdateWarningTableProps> = ({ data, command }) => {\n    const cellIndex = useRef(1);\n    const packageIndex = useRef(0);\n\n    return (\n        <Box\n            width={\"100%\"}\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n        >\n            <Text>Update Available</Text>\n            <Table\n                data={data}\n                cell={(props) => {\n                    let TextComponent: JSX.Element = (\n                        <Text>{props.children}</Text>\n                    );\n\n                    const text = props.children?.toString();\n                    if (!text) return TextComponent;\n\n                    const installedVersion = getVersions(\n                        data[packageIndex.current].current,\n                    );\n\n                    if (cellIndex.current === columIndex.wanted) {\n                        const wantedVersion = getVersions(text);\n\n                        const colors = getColorsByVersionDiffrence(\n                            installedVersion,\n                            wantedVersion,\n                        );\n\n                        TextComponent = (\n                            <VersionText\n                                major={{\n                                    color: colors.major,\n                                    text: wantedVersion.major,\n                                }}\n                                minor={{\n                                    color: colors.minor,\n                                    text: wantedVersion.minor,\n                                }}\n                                patch={{\n                                    color: colors.patch,\n                                    text: wantedVersion.patch,\n                                }}\n                            />\n                        );\n                    }\n\n                    if (cellIndex.current === columIndex.latest) {\n                        const latestVersion = getVersions(text);\n\n                        const colors = getColorsByVersionDiffrence(\n                            installedVersion,\n                            latestVersion,\n                        );\n\n                        TextComponent = (\n                            <VersionText\n                                major={{\n                                    color: colors.major,\n                                    text: latestVersion.major,\n                                }}\n                                minor={{\n                                    color: colors.minor,\n                                    text: latestVersion.minor,\n                                }}\n                                patch={{\n                                    color: colors.patch,\n                                    text: latestVersion.patch,\n                                }}\n                            />\n                        );\n                    }\n\n                    if (cellIndex.current === LAST_COLUMN_INDEX) {\n                        packageIndex.current += 1;\n                        cellIndex.current = 1;\n                    } else {\n                        cellIndex.current += 1;\n                    }\n\n                    return TextComponent;\n                }}\n            />\n            <Text>\n                To update <Text bold>`refine`</Text> packages with the wanted\n                version\n            </Text>\n            <Text>\n                Run the following command{\" \"}\n                <Text color=\"yellowBright\">{command}</Text>\n            </Text>\n        </Box>\n    );\n};\n\nconst VersionText = ({\n    major,\n    minor,\n    patch,\n}: {\n    major: { text: string; color: TextProps[\"color\"] };\n    minor: { text: string; color: TextProps[\"color\"] };\n    patch: { text: string; color: TextProps[\"color\"] };\n}) => {\n    return (\n        <Text>\n            <Text color={major.color}>{major.text}</Text>\n            <Text color={minor.color}>.{minor.text}.</Text>\n            <Text color={patch.color}>{patch.text}</Text>\n        </Text>\n    );\n};\n\nexport default UpdateWarningTable;\n","import { Command } from \"commander\";\nimport { getUpdateWarningTable } from \"@components/update-warning-table\";\nimport { pmCommands } from \"@utils/package\";\nimport execa from \"execa\";\nimport spinner from \"@utils/spinner\";\nimport {\n    NpmOutdatedResponse,\n    RefinePackageInstalledVersionData,\n} from \"@definitions/package\";\nimport semverDiff from \"semver-diff\";\n\nconst load = (program: Command) => {\n    return program\n        .command(\"check-updates\")\n        .description(\"Check all installed `refine` packages are up to date\")\n        .action(action);\n};\n\nconst action = async () => {\n    const packages = await spinner(isRefineUptoDate, \"Checking for updates...\");\n    if (!packages.length) {\n        console.log(\"All `refine` packages are up to date 🎉\\n\");\n        return;\n    }\n\n    await getUpdateWarningTable(packages);\n};\n\n/**\n *\n * @returns `refine` packages that have updates.\n * @returns `[]` if no refine package found.\n * @returns `[]` if all `refine` packages are up to date.\n */\nexport const isRefineUptoDate = async () => {\n    const refinePackages = await getOutdatedRefinePackages();\n\n    return refinePackages;\n};\n\nexport const getOutdatedRefinePackages = async () => {\n    const packages = await getOutdatedPackageList();\n    if (!packages) return [];\n\n    const list: RefinePackageInstalledVersionData[] = [];\n\n    Object.keys(packages).forEach((packageName) => {\n        const dependency = packages[packageName];\n\n        if (packageName.includes(\"@refinedev\")) {\n            list.push({\n                name: packageName,\n                current: dependency.current,\n                wanted: dependency.wanted,\n                latest: dependency.latest,\n            });\n        }\n    });\n\n    // When user has installed `next` version, it will be ahead of the `latest` version. But `npm outdated` command still returns as an outdated package.\n    // So we need to filter out the if `current` version is ahead of `latest` version.\n    // ex: in the npm registry `next` version is 1.1.1 -> [current:1.1.1, wanted:1.1.1, latest:1.1.0]\n    const filteredList = list.filter((item) => {\n        const diff = semverDiff(item.current, item.latest);\n        return !!diff;\n    });\n\n    return filteredList;\n};\n\nexport const getOutdatedPackageList = async () => {\n    const pm = \"npm\";\n\n    const { stdout, timedOut } = await execa(pm, pmCommands[pm].outdatedJson, {\n        reject: false,\n        timeout: 25 * 1000,\n    });\n\n    if (timedOut) {\n        throw new Error(\"Timed out while checking for updates.\");\n    }\n\n    if (!stdout) return null;\n\n    return JSON.parse(stdout) as NpmOutdatedResponse | null;\n};\n\nexport default load;\n","import { Command } from \"commander\";\nimport {\n    copySync,\n    unlinkSync,\n    moveSync,\n    pathExistsSync,\n    mkdirSync,\n} from \"fs-extra\";\nimport temp from \"temp\";\nimport { plural } from \"pluralize\";\nimport execa from \"execa\";\nimport inquirer from \"inquirer\";\nimport { join } from \"path\";\n\nimport { getProjectType, getUIFramework } from \"@utils/project\";\nimport { compileDir } from \"@utils/compile\";\nimport { uppercaseFirstChar } from \"@utils/text\";\nimport { getResourcePath } from \"@utils/resource\";\n\nconst defaultActions = [\"list\", \"create\", \"edit\", \"show\"];\nconst load = (program: Command) => {\n    const projectType = getProjectType();\n    const { path } = getResourcePath(projectType);\n\n    return program\n        .command(\"create-resource\")\n        .allowExcessArguments(true)\n        .description(\"Create a new resource files\")\n        .option(\n            \"-a, --actions [actions]\",\n            \"Only generate the specified actions. (ex: list,create,edit,show)\",\n            \"list,create,edit,show\",\n        )\n        .option(\n            \"-p, --path [path]\",\n            \"Path to generate the resource files\",\n            path,\n        )\n        .action(action);\n};\n\nconst action = async (\n    params: { actions: string; path: string },\n    options: Command,\n) => {\n    let { args } = options;\n    let actions = params.actions;\n\n    if (!args.length) {\n        // TODO: Show inquirer\n        const { name, selectedActions } = await inquirer.prompt<{\n            name: string;\n            selectedActions: string[];\n        }>([\n            {\n                type: \"input\",\n                name: \"name\",\n                message: \"Resource Name\",\n                validate: (value) => {\n                    if (!value) {\n                        return \"Resource Name is required\";\n                    }\n\n                    return true;\n                },\n            },\n            {\n                type: \"checkbox\",\n                name: \"selectedActions\",\n                message: \"Select Actions\",\n                choices: defaultActions,\n                default: params.actions.split(\",\"),\n            },\n        ]);\n\n        args = [name];\n        actions = selectedActions.join(\",\");\n    }\n\n    args.forEach((resourceName) => {\n        const customActions = actions ? actions.split(\",\") : undefined;\n        const { path, alias } = getResourcePath(getProjectType());\n        const resourceFolderName = plural(resourceName).toLowerCase();\n\n        // check exist resource\n        const resourcePath = join(process.cwd(), path, resourceFolderName);\n\n        if (pathExistsSync(resourcePath)) {\n            console.error(\n                `Resource (${join(\n                    path,\n                    resourceFolderName,\n                )}) already exist! ❌`,\n            );\n            return;\n        }\n\n        // uppercase first letter\n        const resource = uppercaseFirstChar(resourceName);\n\n        // get the project type\n        const uiFramework = getUIFramework();\n\n        const sourceDir = `${__dirname}/../templates/resource`;\n\n        // create temp dir\n        const tempDir = generateTempDir();\n\n        // copy template files\n        copySync(sourceDir, tempDir);\n\n        const compileParams = {\n            resourceName,\n            resource,\n            actions: customActions || defaultActions,\n            uiFramework,\n        };\n\n        // compile dir\n        compileDir(tempDir, compileParams);\n\n        // delete ignored actions\n        if (customActions) {\n            defaultActions.forEach((action) => {\n                if (!customActions.includes(action)) {\n                    unlinkSync(`${tempDir}/${action}.tsx`);\n                }\n            });\n        }\n\n        // create desctination dir\n        mkdirSync(params.path, { recursive: true });\n\n        // copy to destination\n        const destinationResourcePath = `${params.path}/${resourceFolderName}`;\n\n        let moveSyncOptions = {};\n\n        // empty dir override\n        if (pathExistsSync(destinationResourcePath)) {\n            moveSyncOptions = { overwrite: true };\n        }\n        moveSync(tempDir, destinationResourcePath, moveSyncOptions);\n\n        // clear temp dir\n        temp.cleanupSync();\n\n        const jscodeshiftExecutable = require.resolve(\".bin/jscodeshift\");\n        const { stderr, stdout } = execa.sync(jscodeshiftExecutable, [\n            \"./\",\n            \"--extensions=ts,tsx,js,jsx\",\n            \"--parser=tsx\",\n            `--transform=${__dirname}/../src/transformers/resource.ts`,\n            `--ignore-pattern=**/.cache/**`,\n            `--ignore-pattern=**/node_modules/**`,\n            `--ignore-pattern=**/build/**`,\n            `--ignore-pattern=**/.next/**`,\n            // pass custom params to transformer file\n            `--__actions=${compileParams.actions}`,\n            `--__pathAlias=${alias}`,\n            `--__resourceFolderName=${resourceFolderName}`,\n            `--__resource=${resource}`,\n            `--__resourceName=${resourceName}`,\n        ]);\n\n        // console.log(stdout);\n\n        if (stderr) {\n            console.log(stderr);\n        }\n\n        console.log(\n            `Resource (${destinationResourcePath}) generated successfully! 🎉`,\n        );\n    });\n\n    return;\n};\n\nconst generateTempDir = (): string => {\n    temp.track();\n    return temp.mkdirSync(\"resource\");\n};\n\nexport default load;\n","export enum ProjectTypes {\n    REACT_SCRIPT = \"react-scripts\",\n    REMIX = \"remix\",\n    NEXTJS = \"nextjs\",\n    VITE = \"vite\",\n    CRACO = \"craco\",\n    PARCEL = \"parcel\",\n    UNKNOWN = \"unknown\",\n}\n","export enum UIFrameworks {\n    ANTD = \"antd\",\n    MUI = \"mui\",\n    MANTINE = \"mantine\",\n    CHAKRA = \"chakra-ui\",\n}\n","export enum PackageManagerTypes {\n    NPM = \"npm\",\n    YARN = \"yarn\",\n    PNPM = \"pnpm\",\n}\n\nexport type NpmOutdatedResponse = Record<\n    string,\n    {\n        current: string;\n        wanted: string;\n        latest: string;\n        dependet?: string;\n    }\n>;\n\nexport type RefinePackageInstalledVersionData = {\n    name: string;\n    current: string;\n    wanted: string;\n    latest: string;\n};\n","import { ProjectTypes, UIFrameworks } from \"@definitions\";\nimport { getDependencies, getDevDependencies } from \"@utils/package\";\n\nexport const getProjectType = (): ProjectTypes => {\n    // read dependencies from package.json\n    const dependencies = getDependencies();\n    const devDependencies = getDevDependencies();\n\n    // check for craco\n    // craco and react-scripts installs together. We need to check for craco first\n    if (\n        dependencies.includes(\"@craco/craco\") ||\n        devDependencies.includes(\"@craco/craco\")\n    ) {\n        return ProjectTypes.CRACO;\n    }\n\n    // check for react-scripts\n    if (\n        dependencies.includes(\"react-scripts\") ||\n        devDependencies.includes(\"react-scripts\")\n    ) {\n        return ProjectTypes.REACT_SCRIPT;\n    }\n\n    // check for next\n    if (dependencies.includes(\"next\") || devDependencies.includes(\"next\")) {\n        return ProjectTypes.NEXTJS;\n    }\n\n    // check for remix\n    if (\n        dependencies.includes(\"@remix-run/react\") ||\n        devDependencies.includes(\"@remix-run/react\")\n    ) {\n        return ProjectTypes.REMIX;\n    }\n\n    // check for vite\n    if (dependencies.includes(\"vite\") || devDependencies.includes(\"vite\")) {\n        return ProjectTypes.VITE;\n    }\n\n    if (dependencies.includes(\"parcel\") || devDependencies.includes(\"parcel\")) {\n        return ProjectTypes.PARCEL;\n    }\n\n    return ProjectTypes.UNKNOWN;\n};\n\nexport const getUIFramework = (): UIFrameworks | undefined => {\n    // read dependencies from package.json\n    const dependencies = getDependencies();\n\n    // check for antd\n    if (dependencies.includes(\"@refinedev/antd\")) {\n        return UIFrameworks.ANTD;\n    }\n\n    // check for mui\n    if (dependencies.includes(\"@refinedev/mui\")) {\n        return UIFrameworks.MUI;\n    }\n\n    // check for chakra\n    if (dependencies.includes(\"@refinedev/chakra-ui\")) {\n        return UIFrameworks.CHAKRA;\n    }\n\n    // check for mantine\n    if (dependencies.includes(\"@refinedev/mantine\")) {\n        return UIFrameworks.MANTINE;\n    }\n\n    return;\n};\n","import Handlebars from \"handlebars\";\nimport {\n    readFileSync,\n    readdirSync,\n    createFileSync,\n    writeFileSync,\n    unlinkSync,\n} from \"fs-extra\";\n\nexport const compile = (filePath: string, params: any): string => {\n    const content = readFileSync(filePath);\n\n    Handlebars.registerHelper(\"ifIn\", function (elem, list, options) {\n        if (elem.includes(list)) {\n            return options.fn(Handlebars);\n        }\n        return options.inverse(Handlebars);\n    });\n\n    Handlebars.registerHelper(\"formatInferencerComponent\", function (string) {\n        if (!string) {\n            return;\n        }\n\n        switch (string) {\n            case \"chakra-ui\":\n                return \"ChakraUI\";\n\n            default:\n                return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n    });\n\n    Handlebars.registerHelper(\"capitalize\", function (string) {\n        if (!string) {\n            return;\n        }\n\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n\n    const template = Handlebars.compile(content.toString());\n    return template(params);\n};\n\nexport const compileDir = (dirPath: string, params: any) => {\n    const files = readdirSync(dirPath);\n\n    files.forEach((file: string) => {\n        const templateFilePath = `${dirPath}/${file}`;\n        // create file\n        const compiledFilePath = `${dirPath}/${file.replace(\".hbs\", \"\")}`;\n        createFileSync(compiledFilePath);\n\n        // write compiled file\n        writeFileSync(compiledFilePath, compile(templateFilePath, params));\n\n        // delete template file (*.hbs)\n        unlinkSync(templateFilePath);\n    });\n};\n","export const uppercaseFirstChar = (str: string): string => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\n\nexport const getResourcePath = (\n    projectType: ProjectTypes,\n): { path: string; alias: string } => {\n    switch (projectType) {\n        case ProjectTypes.NEXTJS:\n            return {\n                path: \"src/components\",\n                alias: \"../src/components\",\n            };\n        case ProjectTypes.REMIX:\n            return {\n                path: \"app/components\",\n                alias: \"~/components\",\n            };\n    }\n\n    // vite and react\n    return {\n        path: \"src/pages\",\n        alias: \"pages\",\n    };\n};\n\nexport const getFilesPathByProject = (projectType?: ProjectTypes) => {\n    switch (projectType) {\n        case ProjectTypes.REMIX:\n            return \"./app\";\n        case ProjectTypes.NEXTJS:\n        case ProjectTypes.REACT_SCRIPT:\n        case ProjectTypes.VITE:\n        case ProjectTypes.CRACO:\n        case ProjectTypes.PARCEL:\n        case ProjectTypes.UNKNOWN:\n        default:\n            return \"./src\";\n    }\n};\n","import { NODE_ENV } from \"@definitions/node\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nconst envSearchMap: Record<Exclude<NODE_ENV, \"custom\">, RegExp> = {\n    development: /dev/i,\n    production: /prod/i,\n    test: /test|tst/i,\n    \"continuous-integration\": /ci/i,\n    \"user-acceptance-testing\": /uat/i,\n    \"system-integration-testing\": /sit/i,\n};\n\nexport const getNodeEnv = (): NODE_ENV => {\n    const nodeEnv = process.env.NODE_ENV;\n\n    if (!nodeEnv) {\n        return \"development\";\n    }\n\n    let env: NODE_ENV = \"custom\";\n\n    for (const [key, value] of Object.entries(envSearchMap)) {\n        if (value.test(nodeEnv)) {\n            env = key as NODE_ENV;\n            break;\n        }\n    }\n\n    return env;\n};\n\nexport const ENV = {\n    NODE_ENV: getNodeEnv(),\n    REFINE_NO_TELEMETRY: process.env.REFINE_NO_TELEMETRY || \"false\",\n    UPDATE_NOTIFIER_IS_DISABLED:\n        process.env.UPDATE_NOTIFIER_IS_DISABLED || \"false\",\n    UPDATE_NOTIFIER_CACHE_TTL:\n        process.env.UPDATE_NOTIFIER_CACHE_TTL || 1000 * 60 * 60 * 24, // 24 hours,\n    REFINE_PROXY_DOMAIN:\n        process.env.REFINE_PROXY_DOMAIN || \"https://refine.dev\",\n    REFINE_PROXY_TARGET:\n        process.env.REFINE_PROXY_TARGET || \"http://localhost:3000\",\n    REFINE_PROXY_PORT: process.env.REFINE_PROXY_PORT || \"7313\",\n    REFINE_PROXY_REWRITE_URL:\n        process.env.REFINE_REWRITE_URL || \"http://localhost:7313\",\n};\n","import { ENV } from \"@utils/env\";\nimport { Command } from \"commander\";\nimport express from \"express\";\nimport { createProxyMiddleware } from \"http-proxy-middleware\";\nimport { OnProxyResCallback } from \"http-proxy-middleware/dist/types\";\n\nconst load = (program: Command) => {\n    return program\n        .command(\"proxy\")\n        .description(\"Manage proxy settings\")\n        .action(action)\n        .option(\n            \"-p, --port [port]\",\n            \"Port to serve the proxy server. You can also set this with the `REFINE_PROXY_PORT` environment variable.\",\n            ENV.REFINE_PROXY_PORT,\n        )\n        .option(\n            \"-t, --target [target]\",\n            \"Target to proxy. You can also set this with the `REFINE_PROXY_TARGET` environment variable.\",\n            ENV.REFINE_PROXY_TARGET,\n        )\n        .option(\n            \"-d, --domain [domain]\",\n            \"Domain to proxy. You can also set this with the `REFINE_PROXY_DOMAIN` environment variable.\",\n            ENV.REFINE_PROXY_DOMAIN,\n        )\n        .option(\n            \"-r, --rewrite-url [rewrite URL]\",\n            \"Rewrite URL for redirects. You can also set this with the `REFINE_PROXY_REWRITE_URL` environment variable.\",\n            ENV.REFINE_PROXY_REWRITE_URL,\n        );\n};\n\nconst action = async ({\n    port,\n    target,\n    domain,\n    rewriteUrl,\n}: {\n    port: string;\n    target: string;\n    domain: string;\n    rewriteUrl: string;\n}) => {\n    const app = express();\n\n    const targetUrl = new URL(target);\n\n    const onProxyRes: OnProxyResCallback | undefined =\n        targetUrl.protocol === \"http:\"\n            ? (proxyRes) => {\n                  if (proxyRes.headers[\"set-cookie\"]) {\n                      proxyRes.headers[\"set-cookie\"]?.forEach((cookie, i) => {\n                          if (\n                              proxyRes &&\n                              proxyRes.headers &&\n                              proxyRes.headers[\"set-cookie\"]\n                          ) {\n                              proxyRes.headers[\"set-cookie\"][i] =\n                                  cookie.replace(\"Secure;\", \"\");\n                          }\n                      });\n                  }\n              }\n            : undefined;\n\n    app.use(\n        \"/.refine\",\n        createProxyMiddleware({\n            target: `${domain}/.refine`,\n            changeOrigin: true,\n            pathRewrite: { \"^/.refine\": \"\" },\n            logProvider: () => ({\n                log: console.log,\n                info: (msg) => {\n                    if (`${msg}`.includes(\"Proxy rewrite rule created\")) return;\n\n                    if (`${msg}`.includes(\"Proxy created\")) {\n                        console.log(\n                            `Proxying localhost:${port}/.refine to ${domain}/.refine`,\n                        );\n                    } else if (msg) {\n                        console.log(msg);\n                    }\n                },\n                warn: console.warn,\n                debug: console.debug,\n                error: console.error,\n            }),\n        }),\n    );\n\n    app.use(\n        \"/.auth\",\n        createProxyMiddleware({\n            target: `${domain}/.auth`,\n            changeOrigin: true,\n            cookieDomainRewrite: {\n                \"refine.dev\": \"\",\n            },\n            headers: {\n                \"auth-base-url-rewrite\": `${rewriteUrl}/.auth`,\n            },\n            pathRewrite: { \"^/.auth\": \"\" },\n            logProvider: () => ({\n                log: console.log,\n                info: (msg) => {\n                    if (`${msg}`.includes(\"Proxy rewrite rule created\")) return;\n\n                    if (`${msg}`.includes(\"Proxy created\")) {\n                        console.log(\n                            `Proxying localhost:${port}/.auth to ${domain}/.auth`,\n                        );\n                    } else if (msg) {\n                        console.log(msg);\n                    }\n                },\n                warn: console.warn,\n                debug: console.debug,\n                error: console.error,\n            }),\n            onProxyRes,\n        }),\n    );\n\n    app.use(\n        \"*\",\n        createProxyMiddleware({\n            target: `${target}`,\n            changeOrigin: true,\n            ws: true,\n            logProvider: () => ({\n                log: console.log,\n                info: (msg) => {\n                    if (`${msg}`.includes(\"Proxy created\")) {\n                        console.log(`Proxying localhost:${port} to ${target}`);\n                    } else if (msg) {\n                        console.log(msg);\n                    }\n                },\n                warn: console.warn,\n                debug: console.debug,\n                error: console.error,\n            }),\n        }),\n    );\n\n    app.listen(Number(port));\n};\n\nexport default load;\n","import { ProjectTypes } from \"@definitions/projectTypes\";\n\n/**\n * Map `refine` cli commands to project script\n */\nexport const projectScripts = {\n    [ProjectTypes.REACT_SCRIPT]: {\n        dev: [\"start\"],\n        start: [\"start\"],\n        build: [\"build\"],\n        getBin: () => require.resolve(\".bin/react-scripts\"),\n    },\n    [ProjectTypes.VITE]: {\n        dev: [\"dev\"],\n        start: [\"preview\"],\n        build: [\"build\"],\n        getBin: () => require.resolve(\".bin/vite\"),\n    },\n    [ProjectTypes.NEXTJS]: {\n        dev: [\"dev\"],\n        start: [\"start\"],\n        build: [\"build\"],\n        getBin: () => require.resolve(\".bin/next\"),\n    },\n    [ProjectTypes.REMIX]: {\n        dev: [\"dev\"],\n        start: [\"build\"],\n        build: [\"build\"],\n        getBin: (type: \"dev\" | \"start\" | \"build\") => {\n            const binName = type === \"start\" ? \"remix-serve\" : \"remix\";\n            return require.resolve(`.bin/${binName}`);\n        },\n    },\n    [ProjectTypes.CRACO]: {\n        dev: [\"start\"],\n        start: [\"start\"],\n        build: [\"build\"],\n        getBin: () => require.resolve(\".bin/craco\"),\n    },\n    [ProjectTypes.PARCEL]: {\n        dev: [\"start\"],\n        start: [\"start\"],\n        build: [\"build\"],\n        getBin: () => require.resolve(\".bin/parcel\"),\n    },\n    [ProjectTypes.UNKNOWN]: {\n        dev: [],\n        start: [],\n        build: [],\n        getBin: () => {\n            return \"unknown\";\n        },\n    },\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\nimport execa from \"execa\";\n\nexport const runScript = async (binPath: string, args: string[]) => {\n    if (binPath === \"unknown\") {\n        const supportedProjectTypes = Object.values(ProjectTypes)\n            .filter((v) => v !== \"unknown\")\n            .join(\", \");\n\n        console.error(\n            `We couldn't find executable for your project. Supported executables are ${supportedProjectTypes}.\\nPlease use your own script directly. If you think this is an issue, please report it at: https://github.com/refinedev/refine/issues`,\n        );\n\n        return;\n    }\n\n    const execution = execa(binPath, args, {\n        stdio: \"pipe\",\n        windowsHide: false,\n        env: {\n            FORCE_COLOR: \"true\",\n            ...process.env,\n        },\n    });\n\n    execution.stdout?.pipe(process.stdout);\n    execution.stderr?.pipe(process.stderr);\n\n    return await execution;\n};\n","import Conf from \"conf\";\nimport chalk from \"chalk\";\nimport { isRefineUptoDate } from \"@commands/check-updates\";\nimport { getUpdateWarningTable } from \"@components/update-warning-table\";\nimport { RefinePackageInstalledVersionData } from \"@definitions/package\";\nimport { getInstalledRefinePackages } from \"@utils/package\";\nimport { ENV } from \"@utils/env\";\nimport { stringToBase64 } from \"@utils/encode\";\n\nconst STORE_NAME = \"refine-update-notifier\";\n\nexport interface Store {\n    key: string;\n    lastUpdated: number;\n    packages: RefinePackageInstalledVersionData[];\n}\n\nexport const store = new Conf<Store>({\n    projectName: STORE_NAME,\n    defaults: {\n        key: \"\",\n        lastUpdated: 0,\n        packages: [],\n    },\n});\n\n// update notifier should not throw any unhandled error to prevent breaking user workflow.\nexport const updateNotifier = async () => {\n    if (isUpdateNotifierDisabled()) return;\n\n    const shouldUpdate = await shouldUpdatePackagesCache();\n    if (shouldUpdate === null) return;\n    if (shouldUpdate) {\n        updatePackagesCache();\n        return;\n    }\n\n    showWarning();\n    updatePackagesCache();\n};\n\n/**\n * renders outdated packages table if there is any\n */\nconst showWarning = async () => {\n    const packages = store.get(\"packages\");\n    if (!packages?.length) return;\n\n    await getUpdateWarningTable(packages);\n    console.log(\"\\n\");\n};\n\n/**\n * @returns `null` It's mean something went wrong while checking key or cache. so we should not update cache.\n * @returns `boolean` if cache should be updated or not\n *   if cache is expired or key is invalid, update cache in background and not show warning\n */\nexport const shouldUpdatePackagesCache = async () => {\n    const isKeyValid = await validateKey();\n    const isExpired = isPackagesCacheExpired();\n\n    if (isKeyValid === null) return null;\n\n    if (isExpired || !isKeyValid) return true;\n\n    return false;\n};\n\n/**\n * @returns `null` something went wrong\n * @returns `packages` if packages updated\n */\nexport const updatePackagesCache = async () => {\n    try {\n        const packages = await isRefineUptoDate();\n\n        store.set(\"packages\", packages);\n        store.set(\"lastUpdated\", Date.now());\n        store.set(\"key\", await generateKeyFromPackages());\n\n        return packages;\n    } catch (error) {\n        // invalidate store\n        store.set(\"packages\", []);\n        store.set(\"lastUpdated\", Date.now());\n        store.set(\"key\", \"\");\n        return null;\n    }\n};\n\nexport const isPackagesCacheExpired = () => {\n    const lastUpdated = store.get(\"lastUpdated\");\n\n    if (!lastUpdated) return true;\n\n    const now = Date.now();\n\n    const diff = now - lastUpdated;\n    const cacheTTL = Number(ENV.UPDATE_NOTIFIER_CACHE_TTL);\n\n    return diff >= cacheTTL;\n};\n\n/**\n * @returns `true` if key is valid\n * @returns `false` if key is invalid\n * @returns `null` if there is an error\n */\nexport const validateKey = async () => {\n    const key = store.get(\"key\");\n    const newKey = await generateKeyFromPackages();\n\n    if (newKey === null) return null;\n\n    return key === newKey;\n};\n\n/**\n * @returns `null` if there is an error\n * @returns `string` if key is generated\n */\nexport const generateKeyFromPackages = async () => {\n    const packages = await getInstalledRefinePackages();\n    if (!packages) {\n        console.error(\n            chalk.red(\n                `Something went wrong when trying to get installed \\`refine\\` packages.`,\n            ),\n        );\n\n        return null;\n    }\n\n    const currentVersionsWithName = packages.map(\n        (p) => `${p.name}@${p.version}`,\n    );\n    const hash = stringToBase64(currentVersionsWithName.toString());\n\n    return hash;\n};\n\nexport const isUpdateNotifierDisabled = () => {\n    return ENV.UPDATE_NOTIFIER_IS_DISABLED.toLocaleLowerCase() === \"true\";\n};\n","export const stringToBase64 = (str: string) => {\n    if (typeof btoa !== \"undefined\") {\n        return btoa(str);\n    }\n\n    return Buffer.from(str).toString(\"base64\");\n};\n\nexport const base64ToString = (base64: string) => {\n    if (typeof atob !== \"undefined\") {\n        return atob(base64);\n    }\n    return Buffer.from(base64, \"base64\").toString();\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\nimport { getProjectType } from \"@utils/project\";\nimport { projectScripts } from \"../projectScripts\";\n\nexport const getRunnerDescription = (runner: \"dev\" | \"start\" | \"build\") => {\n    let projectType = getProjectType();\n    const command = projectScripts[projectType][runner];\n\n    if (projectType === \"remix\" && runner === \"start\") {\n        projectType = \"remix-serve\" as ProjectTypes;\n    }\n\n    return `It runs: \\`${projectType} ${command.join(\n        \" \",\n    )}\\`. Also accepts all the arguments \\`${projectType}\\` accepts.`;\n};\n","import { Command } from \"commander\";\nimport { getProjectType } from \"@utils/project\";\nimport { projectScripts } from \"../projectScripts\";\nimport { runScript } from \"../runScript\";\nimport { updateNotifier } from \"src/update-notifier\";\nimport { getRunnerDescription } from \"../utils\";\n\nconst start = (program: Command) => {\n    return program\n        .command(\"start\")\n        .description(getRunnerDescription(\"start\"))\n        .allowUnknownOption(true)\n        .argument(\"[args...]\")\n        .action(action);\n};\n\nconst action = async (args: string[]) => {\n    const projectType = getProjectType();\n\n    const binPath = projectScripts[projectType].getBin(\"start\");\n    const script = projectScripts[projectType].start;\n    const command = [...script, ...args];\n\n    await updateNotifier();\n\n    runScript(binPath, command);\n};\n\nexport default start;\n","import { Command } from \"commander\";\nimport { getProjectType } from \"@utils/project\";\nimport { projectScripts } from \"../projectScripts\";\nimport { runScript } from \"../runScript\";\nimport { updateNotifier } from \"src/update-notifier\";\nimport { getRunnerDescription } from \"../utils\";\n\nconst dev = (program: Command) => {\n    return program\n        .command(\"dev\")\n        .description(getRunnerDescription(\"dev\"))\n        .allowUnknownOption(true)\n        .argument(\"[args...]\")\n        .action(action);\n};\n\nconst action = async (args: string[]) => {\n    const projectType = getProjectType();\n\n    const binPath = projectScripts[projectType].getBin(\"dev\");\n    const script = projectScripts[projectType].dev;\n    const command = [...script, ...args];\n\n    await updateNotifier();\n\n    runScript(binPath, command);\n};\n\nexport default dev;\n","import { Command } from \"commander\";\nimport { getProjectType } from \"@utils/project\";\nimport { projectScripts } from \"../projectScripts\";\nimport { runScript } from \"../runScript\";\nimport { updateNotifier } from \"src/update-notifier\";\nimport { getRunnerDescription } from \"../utils\";\n\nconst build = (program: Command) => {\n    return program\n        .command(\"build\")\n        .description(getRunnerDescription(\"build\"))\n        .allowUnknownOption(true)\n        .argument(\"[args...]\")\n        .action(action);\n};\n\nconst action = async (args: string[]) => {\n    const projectType = getProjectType();\n\n    const binPath = projectScripts[projectType].getBin(\"build\");\n    const script = projectScripts[projectType].build;\n    const command = [...script, ...args];\n\n    await updateNotifier();\n\n    try {\n        await runScript(binPath, command);\n    } catch (error) {\n        process.exit(1);\n    }\n};\n\nexport default build;\n","import { getPreferedPM, getScripts } from \"@utils/package\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport { runScript } from \"../runScript\";\n\nconst run = (program: Command) => {\n    return program\n        .command(\"run\")\n        .description(\n            \"Runs a defined package script. If no `command` is provided, it will list the available scripts\",\n        )\n        .allowUnknownOption(true)\n        .argument(\"[command] [args...]\")\n        .action(action);\n};\n\nconst action = async (args: string[]) => {\n    const [script, ...restArgs] = args;\n\n    const scriptsInPackage = getScripts();\n\n    // Show available scripts when no script is provided\n    if (!script) {\n        console.log(`Available via ${chalk.blue(\"`refine run`\")}:\\n`);\n        for (const [key, value] of Object.entries(scriptsInPackage)) {\n            console.log(`  ${key}`);\n            console.log(`    ${chalk.dim(value)}`);\n            console.log();\n        }\n\n        return;\n    }\n\n    // Check if script exists in package.json\n    const isDefinedScript = Object.keys(scriptsInPackage).includes(script);\n    // If script is not defined, run from node_modules\n    if (!isDefinedScript) {\n        const binPath = `${process.cwd()}/node_modules/.bin/${script}`;\n        runScript(binPath, restArgs);\n        return;\n    }\n\n    const pm = await getPreferedPM();\n    runScript(pm.name, [\"run\", script, ...restArgs]);\n};\n\nexport default run;\n","import React from \"react\";\nimport { render } from \"ink\";\nimport path from \"path\";\nimport chalk from \"chalk\";\nimport inquirer from \"inquirer\";\nimport { Command, OptionValues } from \"commander\";\nimport inquirerAutoCompletePrompt from \"inquirer-autocomplete-prompt\";\nimport { ensureFile, pathExists, readFile, writeFile } from \"fs-extra\";\n\nimport { getRefineConfig } from \"@utils/swizzle\";\nimport { prettierFormat } from \"@utils/swizzle/prettierFormat\";\nimport {\n    getInstalledRefinePackagesFromNodeModules,\n    isPackageHaveRefineConfig,\n} from \"@utils/package\";\n\nimport SwizzleMessage from \"@components/swizzle-message\";\n\nimport { SwizzleFile } from \"@definitions\";\nimport { parseSwizzleBlocks } from \"@utils/swizzle/parseSwizzleBlocks\";\nimport { reorderImports } from \"@utils/swizzle/import\";\nimport { SWIZZLE_CODES } from \"@utils/swizzle/codes\";\nimport boxen from \"boxen\";\nimport { getPathPrefix } from \"@utils/swizzle/getPathPrefix\";\nimport { installRequiredPackages } from \"./install-required-packages\";\n\nconst swizzle = (program: Command) => {\n    return program\n        .command(\"swizzle\")\n        .description(\n            `Export a component or a function from ${chalk.bold(\n                \"refine\",\n            )} packages to customize it in your project`,\n        )\n        .action(action);\n};\n\nconst getAutocompleteSource =\n    (\n        rawList: Array<{\n            label: string;\n            group?: string;\n            value?: Record<string, unknown>;\n        }>,\n    ) =>\n    (_answers: {}, input = \"\") => {\n        const filtered = rawList.filter(\n            (el) =>\n                el.label.toLowerCase().includes(input.toLowerCase()) ||\n                el.group?.toLowerCase().includes(input.toLowerCase()),\n        );\n\n        return filtered.flatMap((component, index, arr) => {\n            const hasTitle =\n                component?.group && arr[index - 1]?.group !== component.group;\n            const withTitle =\n                hasTitle && component.group\n                    ? [new inquirer.Separator(`${chalk.bold(component.group)}`)]\n                    : [];\n\n            return [\n                ...withTitle,\n                {\n                    name: ` ${component.label}`,\n                    value: component?.value ? component.value : component,\n                },\n            ];\n        });\n    };\n\nconst action = async (_options: OptionValues) => {\n    inquirer.registerPrompt(\"autocomplete\", inquirerAutoCompletePrompt);\n\n    const installedPackages = await getInstalledRefinePackagesFromNodeModules();\n\n    const packagesWithConfig: Array<{ name: string; path: string }> = [];\n\n    await Promise.all(\n        installedPackages.map(async (pkg) => {\n            const hasConfig = await isPackageHaveRefineConfig(pkg.path);\n            const isNotDuplicate =\n                packagesWithConfig.findIndex((el) => el.name === pkg.name) ===\n                -1;\n            if (hasConfig && isNotDuplicate) {\n                packagesWithConfig.push(pkg);\n            }\n        }),\n    );\n\n    if (packagesWithConfig.length === 0) {\n        console.log(\"No refine packages found with swizzle configuration.\");\n        return;\n    }\n\n    console.log(\n        `${boxen(\n            `Found ${chalk.blueBright(\n                packagesWithConfig.length,\n            )} installed ${chalk.blueBright.bold(\n                \"refine\",\n            )} packages with swizzle configuration.`,\n            {\n                padding: 1,\n                textAlignment: \"center\",\n                dimBorder: true,\n                borderColor: \"blueBright\",\n                borderStyle: \"round\",\n            },\n        )}\\n`,\n    );\n\n    const packageConfigs = await Promise.all(\n        packagesWithConfig.map(async (pkg) => {\n            const config = (await getRefineConfig(pkg.path, true)) ??\n                (await getRefineConfig(pkg.path, false)) ?? {\n                    swizzle: { items: [] },\n                };\n            return {\n                ...pkg,\n                config,\n            };\n        }),\n    );\n\n    const { selectedPackage } = await inquirer.prompt<{\n        selectedPackage: (typeof packageConfigs)[number];\n    }>([\n        {\n            type: \"autocomplete\",\n            pageSize: 10,\n            name: \"selectedPackage\",\n            message: \"Which package do you want to swizzle?\",\n            emptyText: \"No packages found.\",\n            source: getAutocompleteSource(\n                packageConfigs\n                    .sort((a, b) =>\n                        (a.config?.group ?? \"\").localeCompare(\n                            b.config?.group ?? \"\",\n                        ),\n                    )\n                    .map((pkg) => ({\n                        label: pkg.config?.name ?? pkg.name,\n                        value: pkg,\n                        group: pkg.config?.group,\n                    })),\n            ),\n        },\n    ]);\n\n    const {\n        swizzle: { items, transform },\n    } = selectedPackage.config;\n\n    let selectedComponent: SwizzleFile | undefined = undefined;\n\n    if (items.length === 0) {\n        console.log(\n            `No swizzle items found for ${chalk.bold(\n                selectedPackage.config?.name ?? selectedPackage.name,\n            )}`,\n        );\n        return;\n    } else if (items.length === 1) {\n        selectedComponent = items[0];\n    } else if (items.length > 1) {\n        const response = await inquirer.prompt<{\n            selectedComponent: SwizzleFile;\n        }>([\n            {\n                type: \"list\",\n                pageSize: 10,\n                name: \"selectedComponent\",\n                message: \"Which component do you want to swizzle?\",\n                emptyText: \"No components found.\",\n                choices: getAutocompleteSource(\n                    items.sort((a, b) => a.group.localeCompare(b.group)),\n                )({}, \"\"),\n            },\n        ]);\n        selectedComponent = response.selectedComponent;\n    }\n\n    if (!selectedComponent) {\n        console.log(\n            `No swizzle items selected for ${chalk.bold(\n                selectedPackage.config?.name ?? selectedPackage.name,\n            )}`,\n        );\n        return;\n    }\n\n    // this will be prepended to `destPath` values\n    const projectPathPrefix = getPathPrefix();\n\n    const createdFiles = await Promise.all(\n        selectedComponent.files.map(async (file) => {\n            try {\n                const srcPath = file.src\n                    ? path.join(selectedPackage.path, file.src)\n                    : undefined;\n                const destPath = file.dest\n                    ? path.join(process.cwd(), projectPathPrefix, file.dest)\n                    : undefined;\n\n                if (!srcPath) {\n                    console.log(\"No src path found for file\", file);\n                    return [\"\", SWIZZLE_CODES.SOURCE_PATH_NOT_FOUND] as [\n                        targetPath: string,\n                        statusCode: string,\n                    ];\n                }\n\n                if (!destPath) {\n                    console.log(\"No destination path found for file\", file);\n                    return [\"\", SWIZZLE_CODES.TARGET_PATH_NOT_FOUND] as [\n                        targetPath: string,\n                        statusCode: string,\n                    ];\n                }\n\n                const hasSrc = await pathExists(srcPath);\n\n                if (!hasSrc) {\n                    return [destPath, SWIZZLE_CODES.SOURCE_PATH_NOT_A_FILE] as [\n                        targetPath: string,\n                        statusCode: string,\n                    ];\n                }\n\n                const srcContent = await readFile(srcPath, \"utf-8\");\n                const isDestExist = await pathExists(destPath);\n\n                if (isDestExist) {\n                    return [destPath, SWIZZLE_CODES.TARGET_ALREADY_EXISTS] as [\n                        targetPath: string,\n                        statusCode: string,\n                    ];\n                }\n\n                await ensureFile(destPath);\n\n                const parsedContent = parseSwizzleBlocks(srcContent);\n\n                const fileTransformedContent =\n                    file.transform?.(parsedContent) ?? parsedContent;\n\n                const transformedContent =\n                    transform?.(fileTransformedContent, srcPath, destPath) ??\n                    fileTransformedContent;\n\n                const reorderedContent = reorderImports(transformedContent);\n\n                const formatted = await prettierFormat(reorderedContent);\n\n                await writeFile(destPath, formatted);\n\n                return [destPath, SWIZZLE_CODES.SUCCESS] as [\n                    targetPath: string,\n                    statusCode: string,\n                ];\n            } catch (error) {\n                return [\"\", SWIZZLE_CODES.UNKNOWN_ERROR] as [\n                    targetPath: string,\n                    statusCode: string,\n                ];\n            }\n        }),\n    );\n\n    if (createdFiles.length > 0) {\n        const { unmount } = render(\n            <SwizzleMessage\n                label={selectedComponent.label}\n                files={createdFiles}\n                message={selectedComponent.message}\n            />,\n        );\n        unmount();\n\n        if (selectedComponent?.requiredPackages?.length) {\n            await installRequiredPackages(selectedComponent.requiredPackages);\n        }\n    }\n};\n\nexport default swizzle;\n","import path from \"path\";\nimport { RefineConfig } from \"@definitions\";\nimport { provideCliHelpers } from \"./provideCliHelpers\";\n\nexport const getRefineConfig = async (\n    packagePath: string,\n    isAbsolute?: boolean,\n) => {\n    try {\n        provideCliHelpers(packagePath, isAbsolute);\n\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const config = require(path.join(\n            isAbsolute ? packagePath : path.join(process.cwd(), packagePath),\n            \"refine.config.js\",\n        )) as RefineConfig;\n\n        return config;\n    } catch (error) {\n        return undefined;\n    }\n};\n","import path from \"path\";\nimport * as RefineCLI from \"../../index\";\nimport { getFileContent } from \"./getFileContent\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Module = require(\"module\");\nconst originalRequire = Module.prototype.require;\n\nexport const provideCliHelpers = (\n    packagePath: string,\n    isAbsolute?: boolean,\n) => {\n    Module.prototype.require = function (...args: Parameters<NodeRequire>) {\n        if ((args[0] as unknown as string) === \"@refinedev/cli\") {\n            return {\n                ...RefineCLI,\n                getFileContent: (filePath: string) => {\n                    return getFileContent.call(\n                        {\n                            absolutePackageDir: isAbsolute\n                                ? packagePath\n                                : path.join(process.cwd(), packagePath),\n                        },\n                        filePath,\n                    );\n                },\n            };\n        }\n\n        //do your thing here\n        return originalRequire.apply(this, args);\n    };\n};\n","export * from \"./definitions\";\nexport { getImports, getNameChangeInImport } from \"./utils/swizzle/import\";\nexport { appendAfterImports } from \"./utils/swizzle/appendAfterImports\";\nexport { getFileContent } from \"./utils/swizzle/getFileContent\";\nexport type { ImportMatch, NameChangeMatch } from \"./utils/swizzle/import\";\n","const packageRegex =\n    /import(?:(?:(?:[ \\n\\t]+([^ *\\n\\t\\{\\},]+)[ \\n\\t]*(?:,|[ \\n\\t]+))?([ \\n\\t]*\\{(?:[ \\n\\t]*[^ \\n\\t\"'\\{\\}]+[ \\n\\t]*,?)+\\})?[ \\n\\t]*)|[ \\n\\t]*\\*[ \\n\\t]*as[ \\n\\t]+([^ \\n\\t\\{\\}]+)[ \\n\\t]+)from[ \\n\\t]*(?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst nameChangeRegex = /((?:\\w|\\s|_)*)( as )((?:\\w|\\s|_)*)( |,)?/g;\n\nexport type ImportMatch = {\n    statement: string;\n    importPath: string;\n    defaultImport?: string;\n    namedImports?: string;\n    namespaceImport?: string;\n};\n\nexport type NameChangeMatch = {\n    statement: string;\n    fromName: string;\n    toName: string;\n    afterCharacter?: string;\n};\n\nexport const getImports = (content: string): Array<ImportMatch> => {\n    const matches = content.matchAll(packageRegex);\n\n    const imports: Array<ImportMatch> = [];\n\n    for (const match of matches) {\n        const [\n            statement,\n            defaultImport,\n            namedImports,\n            namespaceImport,\n            importPath,\n        ] = match;\n\n        imports.push({\n            statement,\n            importPath,\n            ...(defaultImport && { defaultImport }),\n            ...(namedImports && { namedImports }),\n            ...(namespaceImport && { namespaceImport }),\n        });\n    }\n\n    return imports?.filter(Boolean);\n};\n\nexport const getNameChangeInImport = (\n    namedImportString: string,\n): Array<NameChangeMatch> => {\n    const matches = namedImportString.matchAll(nameChangeRegex);\n\n    const nameChanges: Array<NameChangeMatch> = [];\n\n    for (const match of matches) {\n        const [statement, fromName, _as, toName, afterCharacter] = match;\n\n        nameChanges.push({\n            statement,\n            fromName: fromName.trim(),\n            toName: toName.trim(),\n            afterCharacter,\n        });\n    }\n\n    return nameChanges;\n};\n\n/** @internal */\nexport const getContentBeforeImport = (\n    content: string,\n    importMatch: ImportMatch,\n): string => {\n    // get the content before the import statement and between the last import statement and the current one\n    const contentBeforeImport = content.substring(\n        0,\n        content.indexOf(importMatch.statement),\n    );\n    // get the last import statement\n    const lastImportStatement = getImports(contentBeforeImport).pop();\n\n    // if there is no last import statement, return the content before the current import statement\n    if (!lastImportStatement) {\n        return contentBeforeImport;\n    }\n\n    // get the content between the last import statement and the current one\n    const contentBetweenImports = contentBeforeImport.substring(\n        contentBeforeImport.indexOf(lastImportStatement?.statement) +\n            lastImportStatement?.statement?.length,\n    );\n\n    // return the content before the current import statement and between the last import statement and the current one\n    return contentBetweenImports;\n};\n\n/** @internal */\nexport const isImportHasBeforeContent = (\n    content: string,\n    importMatch: ImportMatch,\n): boolean => {\n    const contentBeforeImport = importMatch\n        ? getContentBeforeImport(content, importMatch)\n        : \"\";\n\n    return !!contentBeforeImport.trim();\n};\n\nconst IMPORT_ORDER = [\"react\", \"@refinedev/core\", \"@refinedev/\"];\n\nexport const reorderImports = (content: string): string => {\n    let newContent = content;\n    // imports can have comments before them, we need to preserve those comments and import statements.\n    // so we need to filter out the imports with comments before.\n    const allImports = getImports(content);\n    // remove `import type` imports\n    const allModuleImports = allImports.filter(\n        (importMatch) => !importMatch.statement.includes(\"import type \"),\n    );\n    const typeImports = allImports.filter((importMatch) =>\n        importMatch.statement.includes(\"import type\"),\n    );\n\n    const importsWithBeforeContent: ImportMatch[] = [];\n    const importsWithoutBeforeContent: ImportMatch[] = [];\n\n    allModuleImports.forEach((importMatch) => {\n        if (isImportHasBeforeContent(content, importMatch)) {\n            importsWithBeforeContent.push(importMatch);\n        } else {\n            importsWithoutBeforeContent.push(importMatch);\n        }\n    });\n\n    // insertion point is the first import statement, others will be replaced to empty string and added to the first import line\n    const insertionPoint = newContent.indexOf(\n        importsWithoutBeforeContent?.[0]?.statement,\n    );\n\n    // remove all the imports without comments before\n    importsWithoutBeforeContent.forEach((importMatch) => {\n        newContent = newContent.replace(importMatch.statement, \"\");\n    });\n\n    // remove all type imports\n    typeImports.forEach((importMatch) => {\n        newContent = newContent.replace(importMatch.statement, \"\");\n    });\n\n    // we need to merge the imports from the same package unless one of them is a namespace import]\n    const importsByPackage = importsWithoutBeforeContent.reduce(\n        (acc, importMatch) => {\n            const { importPath } = importMatch;\n\n            if (acc[importPath]) {\n                acc[importPath].push(importMatch);\n            } else {\n                acc[importPath] = [importMatch];\n            }\n\n            return acc;\n        },\n        {} as Record<string, ImportMatch[]>,\n    );\n\n    // merge the imports from the same package\n    const mergedImports = Object.entries(importsByPackage).map(\n        ([importPath, importMatches]) => {\n            // example: A\n            const defaultImport = importMatches.find(\n                (importMatch) => importMatch.defaultImport,\n            );\n\n            // example: * as A\n            const namespaceImport = importMatches.find(\n                (importMatch) => importMatch.namespaceImport,\n            );\n\n            // example: { A, B }\n            // example: { A as C, B }\n            // content inside the curly braces should be merged\n            const namedImports = importMatches\n                .filter((importMatch) => importMatch.namedImports)\n                .map((importMatch) => {\n                    // remove curly braces and trim then split by comma (can be multiline)\n                    const namedImports = (importMatch.namedImports ?? \"\")\n                        .replace(/{|}/g, \"\")\n                        .trim()\n                        .split(\",\")\n                        .map((namedImport) => namedImport.trim());\n\n                    return namedImports.filter(Boolean).join(\", \");\n                })\n                .join(\", \");\n\n            let importLine = \"\";\n\n            // default import and namespace import can not be used together\n            // but we can use default import and named imports together\n            // so we need to merge them\n            if (namespaceImport) {\n                importLine += namespaceImport.statement + \"\\n\";\n            }\n            if (defaultImport || namedImports) {\n                if (defaultImport && namedImports) {\n                    importLine += `import ${defaultImport.defaultImport}, { ${namedImports} } from \"${importMatches[0].importPath}\";\\n`;\n                } else if (defaultImport) {\n                    importLine += `import ${defaultImport.defaultImport} from \"${importMatches[0].importPath}\";\\n`;\n                } else {\n                    importLine += `import { ${namedImports} } from \"${importMatches[0].importPath}\";\\n`;\n                }\n            }\n\n            return [importPath, importLine] as [\n                importPath: string,\n                importLine: string,\n            ];\n        },\n    );\n\n    // sort the imports without comments before\n    // sort should be done by IMPORT_ORDER and alphabetically\n    // priority is exact match in IMPORT_ORDER, then includes match in IMPORT_ORDER, then alphabetically\n    const sortedImports = [...mergedImports].sort(\n        ([aImportPath], [bImportPath]) => {\n            const aImportOrderIndex = IMPORT_ORDER.findIndex((order) =>\n                aImportPath.includes(order),\n            );\n            const bImportOrderIndex = IMPORT_ORDER.findIndex((order) =>\n                bImportPath.includes(order),\n            );\n\n            if (aImportOrderIndex === bImportOrderIndex) {\n                return aImportPath.localeCompare(bImportPath);\n            }\n\n            if (aImportOrderIndex === -1) {\n                return 1;\n            }\n\n            if (bImportOrderIndex === -1) {\n                return -1;\n            }\n\n            return aImportOrderIndex - bImportOrderIndex;\n        },\n    );\n\n    // add the sorted imports to the insertion point keep the before and after content\n    // add the type imports after the sorted imports\n    const joinedModuleImports = sortedImports\n        .map(([, importLine]) => importLine)\n        .join(\"\");\n    const joinedTypeImports = typeImports\n        .map((importMatch) => importMatch.statement)\n        .join(\"\\n\");\n\n    newContent =\n        newContent.substring(0, insertionPoint) +\n        joinedModuleImports +\n        joinedTypeImports +\n        newContent.substring(insertionPoint);\n\n    return newContent;\n};\n","import { getImports } from \"./import\";\n\nexport const appendAfterImports = (content: string, append: string): string => {\n    const imports = getImports(content);\n    const lastImport = imports[imports.length - 1];\n\n    const lastImportIndex = lastImport\n        ? content.indexOf(lastImport.statement)\n        : content.length - 1;\n\n    return (\n        content.slice(0, lastImportIndex + lastImport?.statement.length) +\n        \"\\n\" +\n        append +\n        \"\\n\" +\n        content.slice(lastImportIndex + lastImport?.statement.length)\n    );\n};\n","import { readFileSync } from \"fs-extra\";\nimport { join } from \"path\";\n\nexport function getFileContent(\n    this: undefined | { absolutePackageDir?: string },\n    path: string,\n): string | undefined {\n    if (!this?.absolutePackageDir) {\n        return undefined;\n    }\n    try {\n        return readFileSync(join(this.absolutePackageDir, path)).toString();\n    } catch (err) {\n        return undefined;\n    }\n}\n","import { format, resolveConfig } from \"prettier\";\n\nexport const prettierFormat = async (code: string) => {\n    try {\n        const prettierConfig = await resolveConfig(process.cwd());\n\n        return format(code, {\n            ...(prettierConfig ?? {}),\n            parser: \"typescript\",\n        });\n    } catch (err) {\n        return code;\n    }\n};\n","import React from \"react\";\nimport Markdown from \"ink-markdown\";\nimport dedent from \"dedent\";\nimport { Box, Text } from \"ink\";\nimport { SWIZZLE_CODES } from \"@utils/swizzle/codes\";\nimport { renderCodeMarkdown } from \"@utils/swizzle/renderCodeMarkdown\";\n\ntype Props = {\n    label: string;\n    files: [targetPath: string, statusCode: string][];\n    message?: string;\n};\n\nconst SwizzleMessage: React.FC<Props> = ({\n    label,\n    files,\n    message = \"**`Warning:`** You should use the component where you want to use it.\",\n}) => {\n    const errors = files.filter(([, statusCode]) =>\n        Object.values(SWIZZLE_CODES)\n            .filter((code) => code !== SWIZZLE_CODES.SUCCESS)\n            .includes(statusCode),\n    );\n\n    let status = \"success\";\n\n    switch (errors.length) {\n        // no errors\n        case 0:\n            status = \"success\";\n            break;\n        // all errors\n        case files.length:\n            status = \"error\";\n            break;\n        // some errors\n        default:\n            status = \"warning\";\n            break;\n    }\n\n    const renderStatusMessage = () => {\n        switch (status) {\n            case \"success\":\n                return (\n                    <Text color=\"blueBright\">\n                        Successfully swizzled <Text bold>{label}</Text>\n                    </Text>\n                );\n            case \"warning\":\n                return (\n                    <Text color=\"yellowBright\">\n                        Swizzle completed with errors for{\" \"}\n                        <Text bold>{label}</Text>\n                    </Text>\n                );\n            case \"error\":\n                return (\n                    <Text color=\"redBright\">\n                        Swizzle failed for <Text bold>{label}</Text>\n                    </Text>\n                );\n        }\n        return null;\n    };\n\n    const clearFilePath = (filePath: string) => {\n        const relative = filePath?.replace(process.cwd(), \"\");\n\n        if (relative?.startsWith(\"/\")) {\n            return relative.slice(1);\n        }\n        if (relative?.startsWith(\"./\")) {\n            return relative.slice(2);\n        }\n        return relative;\n    };\n\n    const renderFiles = () => {\n        return (\n            <>\n                <Text dimColor>File{files.length > 1 ? \"s\" : \"\"} created:</Text>\n                {files.map(([targetPath, statusCode], index) => {\n                    if (statusCode === SWIZZLE_CODES.SUCCESS) {\n                        return (\n                            <Text\n                                key={index}\n                                dimColor\n                                color=\"cyanBright\"\n                            >{` - ${clearFilePath(targetPath)}`}</Text>\n                        );\n                    }\n                    if (statusCode === SWIZZLE_CODES.TARGET_ALREADY_EXISTS) {\n                        return (\n                            <Text key={index} dimColor color=\"cyanBright\">\n                                {` - `}\n                                <Text color=\"yellowBright\" bold>\n                                    [FILE_ALREADY_EXISTS]{\" \"}\n                                </Text>\n                                {`${clearFilePath(targetPath)}`}\n                            </Text>\n                        );\n                    }\n                    if (statusCode === SWIZZLE_CODES.SOURCE_PATH_NOT_A_FILE) {\n                        return (\n                            <Text key={index} dimColor color=\"cyanBright\">\n                                {` - `}\n                                <Text color=\"yellowBright\" bold>\n                                    [SOURCE NOT FOUND]{\" \"}\n                                </Text>\n                                {`${clearFilePath(targetPath)}`}\n                            </Text>\n                        );\n                    }\n                    return (\n                        <Text key={index} dimColor color=\"cyanBright\">\n                            {` - `}\n                            <Text color=\"yellowBright\" bold>\n                                [{statusCode}]\n                            </Text>\n                        </Text>\n                    );\n                })}\n            </>\n        );\n    };\n\n    const renderSwizzleMessage = () => {\n        if (message && status !== \"error\") {\n            return (\n                <>\n                    <Markdown code={renderCodeMarkdown}>\n                        {dedent(\"\\n\" + message)}\n                    </Markdown>\n                    <Text>&nbsp;</Text>\n                </>\n            );\n        }\n        return null;\n    };\n\n    return (\n        <Box\n            width={\"100%\"}\n            flexDirection=\"column\"\n            alignItems=\"flex-start\"\n            justifyContent=\"flex-start\"\n        >\n            <Text>&nbsp;</Text>\n            {renderStatusMessage()}\n            {renderFiles()}\n            <Text>&nbsp;</Text>\n            {renderSwizzleMessage()}\n        </Box>\n    );\n};\n\nexport default SwizzleMessage;\n","export const SWIZZLE_CODES = {\n    SUCCESS: \"SUCCESS\",\n    UNKNOWN_ERROR: \"UNKNOWN_ERROR\",\n    SOURCE_PATH_NOT_FOUND: \"SOURCE_PATH_NOT_FOUND\",\n    TARGET_PATH_NOT_FOUND: \"TARGET_PATH_NOT_FOUND\",\n    SOURCE_PATH_NOT_A_FILE: \"SOURCE_PATH_NOT_A_FILE\",\n    TARGET_ALREADY_EXISTS: \"TARGET_ALREADY_EXISTS\",\n};\n","import chalk from \"chalk\";\nimport cardinal from \"cardinal\";\nimport boxen from \"boxen\";\n\nconst getCodeData = (content: string): { title?: string; code: string } => {\n    const titleRegexp = /^(?:\\/\\/\\s?title:\\s?)(.*?)\\n/g;\n\n    const [commentLine, titleMatch] = titleRegexp.exec(content) ?? [];\n\n    if (titleMatch) {\n        const title = titleMatch.trim();\n        const code = content.replace(commentLine, \"\");\n\n        return { title, code };\n    }\n\n    return { code: content };\n};\n\nexport const renderCodeMarkdown = (content: string) => {\n    const { title, code: rawCode } = getCodeData(content);\n\n    let highlighted = \"\";\n\n    // run cardinal on codeContent\n    try {\n        const code = cardinal.highlight(rawCode, {\n            jsx: true,\n        });\n        highlighted = code;\n    } catch (err) {\n        highlighted = rawCode;\n    }\n\n    // wrap to boxen\n    const boxed = boxen(highlighted, {\n        padding: 1,\n        margin: 0,\n        borderStyle: \"round\",\n        borderColor: \"gray\",\n        titleAlignment: \"left\",\n        title: title ? chalk.bold(title) : undefined,\n    });\n\n    return boxed;\n};\n","export const parseSwizzleBlocks = (content: string) => {\n    const regex =\n        /(\\/\\/|\\/\\*)(\\s?)swizzle-remove-start([\\s\\S]*?)(\\/\\/|\\/\\*)(\\s?)swizzle-remove-end(\\s*)(\\*\\/)?/g;\n\n    return content.replace(regex, \"\");\n};\n","import { ProjectTypes } from \"@definitions/projectTypes\";\nimport { getProjectType } from \"@utils/project\";\nimport { getFilesPathByProject } from \"@utils/resource\";\n\nexport const getPathPrefix = () => {\n    let projectType: ProjectTypes | undefined = undefined;\n\n    try {\n        projectType = getProjectType();\n    } catch (error) {\n        projectType = undefined;\n    }\n\n    const pathPrefix = getFilesPathByProject(projectType);\n\n    return pathPrefix;\n};\n","import inquirer from \"inquirer\";\nimport chalk from \"chalk\";\nimport { getPreferedPM, installPackages, pmCommands } from \"@utils/package\";\n\nexport const installRequiredPackages = async (requiredPackages: string[]) => {\n    const installRequiredPackages = await promptForPackageInstallation(\n        requiredPackages,\n    );\n\n    if (!installRequiredPackages) {\n        await displayManualInstallationCommand(requiredPackages);\n    } else {\n        await installPackages(requiredPackages);\n    }\n};\n\nexport const promptForPackageInstallation = async (\n    requiredPackages: string[],\n) => {\n    const message =\n        `This component requires following packages to be installed:\\n`\n            .concat(requiredPackages.map((pkg) => ` - ${pkg}`).join(\"\\n\"))\n            .concat(\"\\nDo you want to install them?\");\n\n    const { installRequiredPackages } = await inquirer.prompt<{\n        installRequiredPackages: boolean;\n    }>([\n        {\n            type: \"confirm\",\n            name: \"installRequiredPackages\",\n            default: true,\n            message,\n        },\n    ]);\n\n    return installRequiredPackages;\n};\n\nexport const displayManualInstallationCommand = async (\n    requiredPackages: string[],\n) => {\n    const pm = await getPreferedPM();\n    const pmCommand = pmCommands[pm.name].install.join(\" \");\n    const packages = requiredPackages.join(\" \");\n    const command = `${pm.name} ${pmCommand} ${packages}`;\n\n    console.log(`\\nYou can install them manually by running this command:`);\n    console.log(chalk.bold.blueBright(command));\n};\n","import { Command, Option } from \"commander\";\nimport { isRefineUptoDate } from \"@commands/check-updates\";\nimport spinner from \"@utils/spinner\";\nimport { getPreferedPM, installPackages, pmCommands } from \"@utils/package\";\nimport { promptInteractiveRefineUpdate } from \"@commands/update/interactive\";\nimport { RefinePackageInstalledVersionData } from \"@definitions/package\";\n\nenum Tag {\n    Wanted = \"wanted\",\n    Latest = \"latest\",\n    Next = \"next\",\n}\n\ninterface OptionValues {\n    tag: Tag;\n    dryRun: boolean;\n    all: boolean;\n}\n\nconst load = (program: Command) => {\n    return program\n        .command(\"update\")\n        .description(\n            \"Interactively select and update all `refine` packages to selected version. To skip the interactive mode, use the `--all` option.\",\n        )\n        .addOption(\n            new Option(\"-t, --tag [tag]\", \"Select version to update to.\")\n                .choices([\"next\", \"latest\"])\n                .default(\n                    \"wanted\",\n                    \"Version ranges in the `package.json` will be installed\",\n                ),\n        )\n        .option(\n            \"-a, --all\",\n            \"Update all `refine` packages to the selected `tag`. If `tag` is not provided, version ranges in the `package.json` will be installed. This option skips the interactive mode.\",\n            false,\n        )\n        .option(\n            \"-d, --dry-run\",\n            \"Get outdated packages installation command without automatic updating. If `tag` is not provided, version ranges in the `package.json` will be used.\",\n            false,\n        )\n        .action(action);\n};\n\nconst action = async (options: OptionValues) => {\n    const { tag, dryRun, all } = options;\n\n    const packages = await spinner(isRefineUptoDate, \"Checking for updates...\");\n    if (!packages?.length) {\n        console.log(\"All `refine` packages are up to date 🎉\");\n        return;\n    }\n\n    const selectedPackages = all\n        ? runAll(tag, packages)\n        : await promptInteractiveRefineUpdate(packages);\n\n    if (!selectedPackages) return;\n\n    if (dryRun) {\n        printInstallCommand(selectedPackages);\n        return;\n    }\n\n    pmInstall(selectedPackages);\n};\n\nconst runAll = (tag: Tag, packages: RefinePackageInstalledVersionData[]) => {\n    if (tag === Tag.Wanted) {\n        const isAllPackagesAtWantedVersion = packages.every(\n            (pkg) => pkg.current === pkg.wanted,\n        );\n        if (isAllPackagesAtWantedVersion) {\n            console.log(\n                \"All `refine` packages are up to date with the wanted version 🎉\",\n            );\n            return null;\n        }\n    }\n\n    const packagesWithVersion = packages.map((pkg) => {\n        const version = tag === Tag.Wanted ? pkg.wanted : tag;\n        return `${pkg.name}@${version}`;\n    });\n\n    return packagesWithVersion;\n};\n\nconst printInstallCommand = async (packages: string[]) => {\n    const pm = await getPreferedPM();\n    const commandInstall = pmCommands[pm.name].install;\n    console.log(`${pm.name} ${commandInstall.join(\" \")} ${packages.join(\" \")}`);\n};\n\nconst pmInstall = (packages: string[]) => {\n    console.log(\"Updating `refine` packages...\");\n    console.log(packages);\n    installPackages(packages);\n};\n\nexport default load;\n","import inquirer from \"inquirer\";\nimport semverDiff from \"semver-diff\";\nimport chalk from \"chalk\";\nimport { findDuplicates } from \"@utils/array\";\nimport { parsePackageNameAndVersion } from \"@utils/package\";\nimport { RefinePackageInstalledVersionData } from \"@definitions/package\";\n\ntype UIGroup = {\n    patch: {\n        name: string;\n        from: string;\n        to: string;\n    }[];\n    minor: {\n        name: string;\n        from: string;\n        to: string;\n    }[];\n    major: {\n        name: string;\n        from: string;\n        to: string;\n    }[];\n};\n\nexport const promptInteractiveRefineUpdate = async (\n    packages: RefinePackageInstalledVersionData[],\n) => {\n    const uiGroup = createUIGroup(packages);\n    if (!uiGroup) {\n        console.log(\"All `refine` packages are up to date. 🎉\");\n        return;\n    }\n\n    const inquirerUI = createInquirerUI(uiGroup);\n\n    const answers = await inquirer.prompt<{\n        packages: string[];\n    }>([\n        {\n            type: \"checkbox\",\n            name: \"packages\",\n            message: \"Choose packages to update\",\n            pageSize: inquirerUI.pageSize,\n            choices: inquirerUI.choices,\n            validate: validatePrompt,\n        },\n    ]);\n\n    return answers.packages.length > 0 ? answers.packages : null;\n};\n\nexport const validatePrompt = (input: string[]) => {\n    const inputParsed = input.map((pckg) => {\n        return parsePackageNameAndVersion(pckg);\n    });\n\n    const names = inputParsed.map((pckg) => pckg.name);\n    const duplicates = findDuplicates(names);\n\n    if (duplicates.length > 0) {\n        return `You can't update the same package more than once. Please choice one.\\n Duplicates: ${duplicates.join(\n            \", \",\n        )}`;\n    }\n\n    return true;\n};\n\nexport const createUIGroup = (\n    packages: RefinePackageInstalledVersionData[],\n): UIGroup | null => {\n    if (packages.length === 0) {\n        return null;\n    }\n\n    const packagesCategorized: UIGroup = {\n        patch: [],\n        minor: [],\n        major: [],\n    };\n\n    packages.forEach((pckg) => {\n        const current = pckg.current;\n\n        const diffWanted = semverDiff(current, pckg.wanted) as keyof UIGroup;\n        const diffLatest = semverDiff(current, pckg.latest) as keyof UIGroup;\n\n        if (diffWanted === diffLatest) {\n            if (diffLatest) {\n                packagesCategorized[diffLatest].push({\n                    name: pckg.name,\n                    from: current,\n                    to: pckg.latest,\n                });\n                return;\n            }\n        }\n\n        if (diffWanted) {\n            packagesCategorized[diffWanted].push({\n                name: pckg.name,\n                from: current,\n                to: pckg.wanted,\n            });\n        }\n\n        if (diffLatest) {\n            packagesCategorized[diffLatest].push({\n                name: pckg.name,\n                from: current,\n                to: pckg.latest,\n            });\n        }\n    });\n\n    return packagesCategorized;\n};\n\nconst createInquirerUI = (uiGroup: UIGroup) => {\n    let maxNameLength = 0;\n    let maxFromLength = 0;\n\n    [uiGroup.patch, uiGroup.minor, uiGroup.major].forEach((group) => {\n        group.forEach((pckg) => {\n            if (pckg.name.length > maxNameLength) {\n                maxNameLength = pckg.name.length;\n            }\n\n            if (pckg.from.length > maxFromLength) {\n                maxFromLength = pckg.from.length;\n            }\n        });\n    });\n\n    maxNameLength += 2;\n\n    const choices: (\n        | inquirer.Separator\n        | {\n              name: string;\n              value: string;\n          }\n    )[] = [];\n\n    const packageColumnText = \"Package\".padEnd(maxNameLength);\n    const currentColumnText = \"From\".padEnd(maxFromLength);\n    const toColumnText = \"To\";\n    const header = `\\n   ${packageColumnText} ${currentColumnText}${toColumnText.padStart(\n        maxFromLength,\n    )}`;\n    choices.push(new inquirer.Separator(header));\n\n    if (uiGroup.patch.length > 0) {\n        choices.push(\n            new inquirer.Separator(chalk.reset.bold.blue(\"\\nPatch Updates\")),\n        );\n        uiGroup.patch.forEach((pckg) => {\n            choices.push({\n                name: `${pckg.name.padEnd(maxNameLength)} ${pckg.from.padStart(\n                    maxFromLength,\n                )} -> ${pckg.to}`,\n                value: `${pckg.name}@${pckg.to}`,\n            });\n        });\n    }\n\n    if (uiGroup.minor.length > 0) {\n        choices.push(\n            new inquirer.Separator(chalk.reset.bold.blue(\"\\nMinor Updates\")),\n        );\n        uiGroup.minor.forEach((pckg) => {\n            choices.push({\n                name: `${pckg.name.padEnd(maxNameLength)} ${pckg.from.padStart(\n                    maxFromLength,\n                )} -> ${pckg.to}`,\n                value: `${pckg.name}@${pckg.to}`,\n            });\n        });\n    }\n\n    if (uiGroup.major.length > 0) {\n        choices.push(\n            new inquirer.Separator(chalk.reset.bold.blue(\"\\nMajor Updates\")),\n        );\n        uiGroup.major.forEach((pckg) => {\n            choices.push({\n                name: `${pckg.name.padEnd(maxNameLength)} ${pckg.from.padStart(\n                    maxFromLength,\n                )} -> ${pckg.to}`,\n                value: `${pckg.name}@${pckg.to}`,\n            });\n        });\n    }\n\n    const pageSize = choices.length + 6;\n\n    return { choices, pageSize };\n};\n","export const findDuplicates = (arr: (string | number)[]) => {\n    const duplicates = arr.filter((item, index) => arr.indexOf(item) !== index);\n    const unique = new Set(duplicates);\n    return Array.from(unique);\n};\n","import { getInstalledRefinePackages } from \"@utils/package\";\nimport { Command } from \"commander\";\nimport envinfo from \"envinfo\";\nimport ora from \"ora\";\n\nconst whoami = (program: Command) => {\n    return program\n        .command(\"whoami\")\n        .description(\"View the details of the development environment\")\n        .action(action);\n};\n\nconst action = async () => {\n    const spinner = ora(\"Loading environment details...\").start();\n    const info = await envinfo.run(\n        {\n            System: [\"OS\", \"CPU\"],\n            Binaries: [\"Node\", \"Yarn\", \"npm\"],\n            Browsers: [\"Chrome\", \"Firefox\", \"Safari\"],\n        },\n        { showNotFound: true, markdown: true },\n    );\n\n    const packages = (await getInstalledRefinePackages()) || [];\n    const packagesMarkdown = packages\n        .map((pkg) => {\n            return ` - ${pkg.name}: ${pkg.version}`;\n        })\n        .join(\"\\n\");\n\n    spinner.stop();\n    console.log(info);\n    console.log(\"## Refine Packages:\");\n    console.log(packagesMarkdown);\n};\n\nexport default whoami;\n","import envinfo from \"envinfo\";\nimport os from \"os\";\n\nexport const getOSType = () => {\n    const osPlatform = os.type();\n\n    const types: Record<string, \"macOS\" | \"Linux\" | \"Windows\"> = {\n        Darwin: \"macOS\",\n        Linux: \"Linux\",\n        Windows_NT: \"Windows\",\n    };\n\n    return types[osPlatform];\n};\n\nexport const getOS = async () => {\n    // returns as a ['OS', 'macOS Mojave 10.14.5']\n    const [_, OSInfo] =\n        (await envinfo.helpers.getOSInfo()) as unknown as string[];\n\n    return {\n        name: getOSType(),\n        version: OSInfo,\n    };\n};\n","import { NODE_ENV } from \"@definitions/node\";\nimport { ProjectTypes } from \"@definitions/projectTypes\";\nimport { ENV } from \"@utils/env\";\nimport { getOS } from \"@utils/os\";\nimport { getInstalledRefinePackages } from \"@utils/package\";\nimport { getProjectType } from \"@utils/project\";\nimport fetch from \"node-fetch\";\n\ninterface TelemetryData {\n    nodeEnv?: NODE_ENV;\n    nodeVersion: string;\n    os: string;\n    osVersion: string;\n    command: string;\n    packages: {\n        name: string;\n        version: string;\n    }[];\n    projectFramework: ProjectTypes;\n}\n\nexport const getTelemetryData = async (): Promise<TelemetryData> => {\n    const os = await getOS();\n\n    const data = {\n        nodeEnv: ENV.NODE_ENV,\n        nodeVersion: process.version,\n        os: os.name,\n        osVersion: os.version,\n        command: process.argv[2],\n        packages: (await getInstalledRefinePackages()) || [],\n        projectFramework: getProjectType(),\n    };\n\n    return data;\n};\n\nexport const telemetryHook = async () => {\n    if (ENV.REFINE_NO_TELEMETRY === \"true\") return;\n\n    try {\n        const data = await getTelemetryData();\n\n        await fetch(\"https://telemetry.refine.dev/cli\", {\n            method: \"POST\",\n            body: JSON.stringify(data),\n            headers: { \"Content-Type\": \"application/json\" },\n        });\n    } catch (error) {}\n};\n","import React from \"react\";\n\nimport CloudMessage from \"@components/cloud-message\";\nimport { render } from \"ink\";\n\nconst NotifyCloud = () => render(<CloudMessage />);\n\nexport default NotifyCloud;\n","import { Box, Newline, Text } from \"ink\";\nimport React from \"react\";\n\nconst CloudMessage: React.FC = () => {\n    return (\n        <Box\n            flexDirection=\"column\"\n            alignItems=\"flex-start\"\n            justifyContent=\"flex-start\"\n            borderColor={\"greenBright\"}\n            borderStyle=\"double\"\n            padding={1}\n        >\n            <Text color=\"greenBright\">✅ Zero-trust security model</Text>\n            <Text color=\"greenBright\">✅ User/role management</Text>\n            <Text color=\"greenBright\">✅ Granular access control</Text>\n            <Text color=\"greenBright\">✅ Directory sync</Text>\n            <Text color=\"greenBright\">✅ VPN-less secure deployments</Text>\n            <Text color=\"greenBright\">✅ Direct connection to DBs</Text>\n\n            <Newline />\n            <Text>\n                Interested in any of the new backend features of refine? Join\n                now and get early access -&gt;\n                https://s.refine.dev/meet-enterprise\n            </Text>\n        </Box>\n    );\n};\n\nexport default CloudMessage;\n"],"mappings":"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","names":["Command","figlet","React","render","readFileSync","existsSync","readJSON","pathExists","execa","globby","path","preferredPM","ora","spinner","fn","message","result","spinner_default","getPackageJson","existsSync","readFileSync","getDependencies","packageJson","getDevDependencies","packageJson","getPackageJson","getScripts","getInstalledRefinePackages","_a","execution","execa","dependencies","refineDependencies","dependency","normalize","version","getInstalledRefinePackagesFromNodeModules","REFINE_PACKAGES","packagesFromGlobbySearch","globby","packageDirsFromModules","pkg","pkgPath","__require","path","refinePackages","packageDir","pathExists","readJSON","isPackageHaveRefineConfig","packagePath","pmCommands","getPreferedPM","pm","spinner_default","preferredPM","installPackages","packages","installCommand","message","error","exitCode","parsePackageNameAndVersion","str","versionStartIndex","React","useRef","Table","Box","Text","columIndex","LAST_COLUMN_INDEX","getVersions","text","versions","getColorsByVersionDiffrence","installedVersion","nextVersion","UpdateWarningTable","data","command","cellIndex","packageIndex","props","_a","TextComponent","wantedVersion","colors","VersionText","latestVersion","major","minor","patch","table_default","getCommand","fallbackCommand","dependencies","getDependencies","scriptKeys","getScripts","hasCli","hasScript","pm","getPreferedPM","getUpdateWarningTable","packages","command","render","React","table_default","execa","semverDiff","load","program","action","packages","spinner_default","isRefineUptoDate","getUpdateWarningTable","getOutdatedRefinePackages","getOutdatedPackageList","list","packageName","dependency","item","pm","stdout","timedOut","execa","pmCommands","check_updates_default","copySync","unlinkSync","moveSync","pathExistsSync","mkdirSync","temp","plural","execa","inquirer","join","ProjectTypes","UIFrameworks","PackageManagerTypes","getProjectType","dependencies","getDependencies","devDependencies","getDevDependencies","getUIFramework","Handlebars","readFileSync","readdirSync","createFileSync","writeFileSync","unlinkSync","compile","filePath","params","content","elem","list","options","string","compileDir","dirPath","file","templateFilePath","compiledFilePath","uppercaseFirstChar","str","getResourcePath","projectType","getFilesPathByProject","defaultActions","load","program","projectType","getProjectType","path","getResourcePath","action","params","options","args","actions","name","selectedActions","inquirer","value","resourceName","customActions","alias","resourceFolderName","plural","resourcePath","join","pathExistsSync","resource","uppercaseFirstChar","uiFramework","getUIFramework","sourceDir","tempDir","generateTempDir","copySync","compileParams","compileDir","unlinkSync","mkdirSync","destinationResourcePath","moveSyncOptions","moveSync","temp","jscodeshiftExecutable","__require","stderr","stdout","execa","create_resource_default","dotenv","envSearchMap","getNodeEnv","nodeEnv","env","key","value","ENV","express","createProxyMiddleware","load","program","action","ENV","port","target","domain","rewriteUrl","app","onProxyRes","proxyRes","_a","cookie","i","msg","proxy_default","projectScripts","__require","type","binName","execa","runScript","binPath","args","_a","_b","supportedProjectTypes","ProjectTypes","v","execution","Conf","chalk","stringToBase64","str","STORE_NAME","store","Conf","updateNotifier","isUpdateNotifierDisabled","shouldUpdate","shouldUpdatePackagesCache","updatePackagesCache","showWarning","packages","getUpdateWarningTable","isKeyValid","validateKey","isExpired","isPackagesCacheExpired","isRefineUptoDate","generateKeyFromPackages","lastUpdated","diff","cacheTTL","ENV","key","newKey","getInstalledRefinePackages","chalk","currentVersionsWithName","p","stringToBase64","getRunnerDescription","runner","projectType","getProjectType","command","projectScripts","start","program","getRunnerDescription","action","args","projectType","getProjectType","binPath","projectScripts","command","updateNotifier","runScript","start_default","dev","program","getRunnerDescription","action","args","projectType","getProjectType","binPath","projectScripts","command","updateNotifier","runScript","dev_default","build","program","getRunnerDescription","action","args","projectType","getProjectType","binPath","projectScripts","command","updateNotifier","runScript","build_default","chalk","run","program","action","args","script","restArgs","scriptsInPackage","getScripts","chalk","key","value","binPath","runScript","pm","getPreferedPM","run_default","React","render","path","chalk","inquirer","inquirerAutoCompletePrompt","ensureFile","pathExists","readFile","writeFile","path","path","src_exports","__export","PackageManagerTypes","ProjectTypes","UIFrameworks","appendAfterImports","getFileContent","getImports","getNameChangeInImport","packageRegex","nameChangeRegex","getImports","content","matches","imports","match","statement","defaultImport","namedImports","namespaceImport","importPath","getNameChangeInImport","namedImportString","nameChanges","fromName","_as","toName","afterCharacter","getContentBeforeImport","importMatch","_a","contentBeforeImport","lastImportStatement","isImportHasBeforeContent","IMPORT_ORDER","reorderImports","newContent","allImports","allModuleImports","typeImports","importsWithBeforeContent","importsWithoutBeforeContent","insertionPoint","importsByPackage","acc","joinedModuleImports","importMatches","namedImport","importLine","aImportPath","bImportPath","aImportOrderIndex","order","bImportOrderIndex","joinedTypeImports","appendAfterImports","content","append","imports","getImports","lastImport","lastImportIndex","readFileSync","join","getFileContent","path","Module","originalRequire","provideCliHelpers","packagePath","isAbsolute","args","src_exports","filePath","getFileContent","path","getRefineConfig","packagePath","isAbsolute","provideCliHelpers","__require","path","format","resolveConfig","prettierFormat","code","prettierConfig","React","Markdown","dedent","Box","Text","SWIZZLE_CODES","chalk","cardinal","boxen","getCodeData","content","titleRegexp","commentLine","titleMatch","title","code","renderCodeMarkdown","rawCode","highlighted","SwizzleMessage","label","files","message","errors","statusCode","SWIZZLE_CODES","code","status","renderStatusMessage","React","Text","clearFilePath","filePath","relative","renderFiles","targetPath","index","renderSwizzleMessage","Markdown","renderCodeMarkdown","dedent","Box","swizzle_message_default","parseSwizzleBlocks","content","regex","boxen","getPathPrefix","projectType","getProjectType","getFilesPathByProject","inquirer","chalk","installRequiredPackages","requiredPackages","promptForPackageInstallation","installPackages","displayManualInstallationCommand","message","pkg","inquirer","pm","getPreferedPM","pmCommand","pmCommands","packages","command","chalk","swizzle","program","chalk","action","getAutocompleteSource","rawList","_answers","input","el","_a","component","index","arr","inquirer","_options","_b","_c","inquirerAutoCompletePrompt","installedPackages","getInstalledRefinePackagesFromNodeModules","packagesWithConfig","pkg","hasConfig","isPackageHaveRefineConfig","isNotDuplicate","boxen","packageConfigs","config","getRefineConfig","selectedPackage","a","b","items","transform","selectedComponent","projectPathPrefix","getPathPrefix","createdFiles","file","srcPath","path","destPath","SWIZZLE_CODES","pathExists","srcContent","readFile","ensureFile","parsedContent","parseSwizzleBlocks","fileTransformedContent","transformedContent","reorderedContent","reorderImports","formatted","prettierFormat","writeFile","unmount","render","React","swizzle_message_default","installRequiredPackages","swizzle_default","Option","inquirer","semverDiff","chalk","findDuplicates","arr","duplicates","item","index","unique","promptInteractiveRefineUpdate","packages","uiGroup","createUIGroup","inquirerUI","createInquirerUI","answers","inquirer","validatePrompt","input","names","pckg","parsePackageNameAndVersion","duplicates","findDuplicates","packagesCategorized","current","diffWanted","semverDiff","diffLatest","maxNameLength","maxFromLength","group","choices","packageColumnText","currentColumnText","header","chalk","pageSize","load","program","Option","action","options","tag","dryRun","all","packages","spinner_default","isRefineUptoDate","selectedPackages","runAll","promptInteractiveRefineUpdate","printInstallCommand","pmInstall","pkg","version","pm","getPreferedPM","commandInstall","pmCommands","installPackages","update_default","envinfo","ora","whoami","program","action","spinner","info","packagesMarkdown","getInstalledRefinePackages","pkg","whoami_default","envinfo","os","getOSType","osPlatform","getOS","_","OSInfo","fetch","getTelemetryData","os","getOS","ENV","getInstalledRefinePackages","getProjectType","telemetryHook","data","React","Box","Newline","Text","React","CloudMessage","cloud_message_default","render","NotifyCloud","React","cloud_message_default","cloud_notifier_default","REFINE_CLI_VERSION","bootstrap","program","Command","figlet","swizzle_default","create_resource_default","update_default","dev_default","build_default","start_default","run_default","check_updates_default","whoami_default","proxy_default","thisCommand","cloud_notifier_default","command","telemetryHook"]}