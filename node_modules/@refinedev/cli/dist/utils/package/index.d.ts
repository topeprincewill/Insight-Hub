export declare const getPackageJson: () => any;
export declare const getDependencies: () => string[];
export declare const getDependenciesWithVersion: () => string[];
export declare const getDevDependencies: () => string[];
export declare const getScripts: () => Record<string, string>;
export declare const getInstalledRefinePackages: () => Promise<{
    name: string;
    version: string;
}[] | null>;
export declare const getInstalledRefinePackagesFromNodeModules: () => Promise<{
    name: string;
    path: string;
}[]>;
export declare const isPackageHaveRefineConfig: (packagePath: string) => Promise<boolean>;
export declare const pmCommands: {
    npm: {
        install: string[];
        installDev: string[];
        outdatedJson: string[];
    };
    yarn: {
        install: string[];
        installDev: string[];
        outdatedJson: string[];
    };
    pnpm: {
        install: string[];
        installDev: string[];
        outdatedJson: string[];
    };
};
export declare const getPreferedPM: () => Promise<{
    name: "npm" | "pnpm" | "yarn";
    version: string;
}>;
export declare const installPackages: (packages: string[]) => Promise<void>;
export interface PackageNameAndVersion {
    name: string;
    version: string | null;
}
export declare const parsePackageNameAndVersion: (str: string) => PackageNameAndVersion;
//# sourceMappingURL=index.d.ts.map